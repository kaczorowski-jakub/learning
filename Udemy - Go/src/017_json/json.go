package main

import (
	"encoding/json"
	"fmt"
	"io"
	"os"
	"sort"

	"golang.org/x/crypto/bcrypt"
)

func main() {
	bcryptTry()
	//sortCustom()
	//sortTry()
	//writerIntfo()
	//unmarshal()
	//marshal()
}

func bcryptTry() {
	s := `password123`
	bs, err := bcrypt.GenerateFromPassword([]byte(s), bcrypt.MinCost)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(bs)

	givenPwd := "password123"

	err = bcrypt.CompareHashAndPassword(bs, []byte(givenPwd))
	if err != nil {
		fmt.Println(err)
	} else {
		fmt.Println("It's ok")
	}

	err = bcrypt.CompareHashAndPassword(bs, []byte(givenPwd+"@"))
	if err != nil {
		fmt.Println(err)
	} else {
		fmt.Println("It's ok")
	}
}

//------------------------------------------------------------
type person3 struct {
	first string
	age   int
}

func (p person3) String() string {
	return fmt.Sprintf("%s: %d", p.first, p.age)
}

type ByAge []person3
type ByName []person3

func (a ByAge) Len() int           { return len(a) }
func (a ByAge) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a ByAge) Less(i, j int) bool { return a[i].age < a[j].age }

func (a ByName) Len() int           { return len(a) }
func (a ByName) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a ByName) Less(i, j int) bool { return a[i].first > a[j].first }

func sortCustom() {
	p1 := person3{"James", 32}
	p2 := person3{"Moneypenny", 27}
	p3 := person3{"Q", 54}
	p4 := person3{"M", 56}

	people := []person3{p1, p2, p3, p4}
	fmt.Println(people)
	sort.Sort(ByAge(people)) // conversion slice of people to ByAge
	fmt.Println(people)

	var x ByAge = []person3{p4, p3, p2, p1}
	fmt.Println(x)
	sort.Sort(x)
	fmt.Println(x)

	// reverse order
	sort.Slice(people, func(i, j int) bool {
		return people[i].age > people[j].age
	})
	fmt.Println(people)

	// sort by name asc
	sort.Slice(people, func(i, j int) bool {
		return people[i].first < people[j].first
	})
	fmt.Println(people)

	// sort by name des
	sort.Sort(ByName(people))
	fmt.Println(people)
}

//------------------------------------------------------------
func sortTry() {
	xi := []int{4, 7, 3, 42, 99, 18, 16, 56, 12}
	xs := []string{"James", "Q", "M", "Moneypenny", "Dr. No"}

	fmt.Println(xi)
	fmt.Println(xs)
	sort.Ints(xi)
	sort.Strings(xs)
	fmt.Println(xi)
	fmt.Println(xs)
}

//--------------------------------------------------------------
func writerIntfo() {
	fmt.Println("Boss")
	fmt.Fprintln(os.Stdout, "Hello World")
	io.WriteString(os.Stdout, " Allan")
}

//--------------------------------------------------------------
// below is a bunch of structs with tags
// tags are meta-data to help in this case JSON mapping
type AutoGenerated1 []struct {
	First string `json:"First"`
	Last  string `json:"Last"`
	Age   int    `json:"Age"`
}

// skip -
type AutoGenerated2 []struct {
	First string `json:"-"`
	Last  string `json:"Last"`
	Age   int    `json:"-"`
}

// switch by names
type AutoGenerated3 []struct {
	First string `json:"Last"`
	Last  string `json:"First"`
	Age   int    `json:"-"`
}

func unmarshal() {
	// Marshal
	p1 := person2{
		First: "James",
		Last:  "Bond",
		Age:   32,
	}

	p2 := person2{
		First: "Cezary",
		Last:  "Pazura",
		Age:   37,
	}
	people := []person2{p1, p2}
	fmt.Println(people)
	bs, err := json.Marshal(people)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("Marshaling: ", string(bs))

	// Unmarshal AG1
	var ag1 AutoGenerated1
	err = json.Unmarshal(bs, &ag1)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("Unmarshaling AG1", ag1)

	// Unmarshal AG2
	var ag2 AutoGenerated2
	err = json.Unmarshal(bs, &ag2)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("Unmarshaling AG2", ag2)

	// Unmarshal AG3
	var ag3 AutoGenerated3
	err = json.Unmarshal(bs, &ag3)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("Unmarshaling AG3", ag3)
}

//-------------------------
type person struct {
	first string
	last  string
	age   int
}

type person2 struct {
	First string
	Last  string
	Age   int
}

func marshal() {
	p1 := person{
		first: "James",
		last:  "Bond",
		age:   32,
	}

	p2 := person{
		first: "Cezary",
		last:  "Pazura",
		age:   37,
	}

	people := []person{p1, p2}
	fmt.Println(people)

	// nothing because fields of person are lower case !!! WHY
	bs, err := json.Marshal(people)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(string(bs))

	// now we will get everything
	p3 := person2{
		First: "James",
		Last:  "Bond",
		Age:   32,
	}

	p4 := person2{
		First: "Cezary",
		Last:  "Pazura",
		Age:   37,
	}
	people2 := []person2{p3, p4}
	fmt.Println(people2)
	bs, err = json.Marshal(people2)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(string(bs))
}
